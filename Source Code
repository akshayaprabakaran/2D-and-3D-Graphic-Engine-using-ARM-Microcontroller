#include <cr_section_macros.h>
#include <NXP/crp.h>
#include <math.h>
//#include "conio.h"
// Variable to store CRP value in. Will be placed automatically
// by the linker when "Enable Code Read Protect" selected.
// See crp.h header for more information
__CRP const unsigned int CRP_WORD = CRP_NO_CRP ;
#include "LPC17xx.h"     /* LPC17xx definitions */
#include "ssp.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "font.h"
//LCD
#define ST7735_TFTWIDTH  127
#define ST7735_TFTHEIGHT 159
#define ST7735_CASET   0x2A
#define ST7735_RASET   0x2B
#define ST7735_RAMWR   0x2C
#define swap(x, y) { x = x + y; y = x - y; x = x - y; }

#define BLACK  0x000000

int height = ST7735_TFTHEIGHT;
int width = ST7735_TFTWIDTH;
int cursor_x = 0, cursor_y = 0;
int rotation = 0;
int textsize  = 1;
int x_diff = 64;
int y_diff = 80;

#define SKYBLUE 	0xE0FFFF
#define LIGHTBLUE 	0x00FFE0
#define GREEN 		0x00FF00
#define DARKGREEN 	0x007500
#define DARKBLUE 	0x000033
#define BLACK 		0x000000
#define BLUE 		0x0007FF
#define RED 		0xFF0000
#define MAGENTA 	0x00F81F
#define WHITE 		0xFFFFFF
#define PURPLE 		0xCC33FF
#define BROWN		0x251000
#define DARKBROWN	0x250500
#define YELLOW		0xFFFF00
#define SAND		0xA0522D
#define ROAD		0x2B2D30

typedef struct {
		int x;
		int y;
} point;

typedef struct {
		int x;
		int y;
		int z;
} point3d;


typedef struct {
	point	currentPt;			// The tip of this branch
	int8_t 	directionX;			// The direction in which this branch grows
	int8_t 	directionY;
} branch;

point3d camera = { 200, 200, 200 };
float D_focal = 100;

#define PORT_NUM            0
#define LOCATION_NUM        0

#define LIM_RANGE(value, max, min)	(value > max) ? max : (value < min) ? min : value

uint8_t src_addr[SSP_BUFSIZE];
uint8_t dest_addr[SSP_BUFSIZE];
int colstart = 0;
int rowstart = 0;


void spiwrite(uint8_t c)
{
	int pnum = 0;
	src_addr[0] = c;
	SSP_SSELToggle( pnum, 0 );
	SSPSend( pnum, (uint8_t *)src_addr, 1 );
	SSP_SSELToggle( pnum, 1 );
}

void writecommand(uint8_t c)
{
	LPC_GPIO0->FIOCLR |= (0x1<<21);
	spiwrite(c);
}


void fillrect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint32_t color)
{
	int16_t width, height;
	width = x1-x0+1;
	height = y1-y0+1;
	setAddrWindow(x0,y0,x1,y1);
	writecommand(ST7735_RAMWR);
	write888(color,width*height);
}

void fill_LCDdisplay(uint32_t color) {
	fillrect(0,0,width,height,color);
}
void draw_fast_h_line(int16_t x, int16_t y,
				 int16_t w, uint32_t color) {
    draw_line(x, y, x+w-1, y, color);
}
void draw_fast_v_line(int16_t x, int16_t y,
				 int16_t h, uint32_t color) {
  // Update in subclasses if desired!
  draw_line(x, y, x, y+h-1, color);
}
void draw_rect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint32_t color) {
  draw_fast_h_line(x, y, w, color);
  draw_fast_h_line(x, y+h-1, w, color);
  draw_fast_v_line(x, y, h, color);
  draw_fast_v_line(x+w-1, y, h, color);
}
void spi_write(uint8_t c)
{
    int portnum = 0;
    src_addr[0] = c;
    SSP_SSELToggle( portnum, 0 );
    SSPSend( portnum, (uint8_t *)src_addr, 1 );
    SSP_SSELToggle( portnum, 1 );
}
void write_cmd(uint8_t c) {
    LPC_GPIO0->FIOCLR |= (0x1<<21);
    spi_write(c);
}
void write_data(uint8_t c) {

    LPC_GPIO0->FIOSET |= (0x1<<21);
    spi_write(c);
}
void write_word(uint16_t c) {

    uint8_t d;
    d = c >> 8;
    write_data(d);
    d = c & 0xFF;
    write_data(d);
}
void write888(uint32_t c, uint32_t repeat) {
    uint8_t red, green, blue;
    uint32_t color = c;
    int i;
    red = (color >> 16);
    green = (color >> 8) & 0xFF;
    blue = color & 0xFF;
    for (i = 0; i< repeat; i++) {
    	write_data(red);
        write_data(green);
        write_data(blue);
    }
}
void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1,
                    uint16_t y1) {

      write_cmd(ST7735_CASET);
      write_word(x0);
      write_word(x1);
      write_cmd(ST7735_RASET);
      write_word(y0);
      write_word(y1);
}
void draw_pixel(int16_t x, int16_t y, uint32_t color)
{
    if((x < 0) ||(x >= width) || (y < 0) || (y >= height)) return;

    setAddrWindow(x,y,x+1,y+1);
    write_cmd(ST7735_RAMWR);
    write888(color, 1);
}
void h_line(int16_t x0,int16_t x1,int16_t y,uint16_t color){
    width = x1-x0+1;
    setAddrWindow(x0,y,x1,y);
    write_cmd(ST7735_RAMWR);
    write888(color,width);
}
void v_line(int16_t x,int16_t y0,int16_t y1,uint16_t color){
    width = y1-y0+1;
    setAddrWindow(x,y0,x,y1);
    write_cmd(ST7735_RAMWR);
    write888(color,width);
}
void lcd_delay(int16_t delay)
{
	int i,j;
	for(i=0; i<=delay;i++)
	{
		j=0;
	}
}
void lcd_init()
{
    uint32_t portnum = 0;
    int i;
    printf("LCD initialized\n");
    if ( portnum == 0 )
      {
        LPC_GPIO0->FIODIR |= (0x1<<16);        /* SSP1, P0.16 defined as Outputs */
      }
      else
      {
        LPC_GPIO0->FIODIR |= (0x1<<6);        /* SSP0 P0.6 defined as Outputs */
      }
    /* Set rs(dc) and rst as outputs */
    LPC_GPIO0->FIODIR |= (0x1<<21);        /* rs/dc P0.22 defined as Outputs */
    LPC_GPIO0->FIODIR |= (0x1<<22);        /* rst P0.21 defined as Outputs */
    /* Reset sequence */
    LPC_GPIO0->FIOSET |= (0x1<<22);

    lcd_delay(500);                        /*delay 500 ms */
    LPC_GPIO0->FIOCLR |= (0x1<<22);
    lcd_delay(500);                        /* delay 500 ms */
    LPC_GPIO0->FIOSET |= (0x1<<22);
    lcd_delay(500);                        /* delay 500 ms */
     for ( i = 0; i < SSP_BUFSIZE; i++ )    /* Init RD and WR buffer */
        {
            src_addr[i] = 0;
            dest_addr[i] = 0;
        }
     SSP_SSELToggle( portnum, 0 );
     src_addr[0] = 0x11;    /* Sleep out */
     SSPSend( portnum, (uint8_t *)src_addr, 1 );
     SSP_SSELToggle( portnum, 1 );

     lcd_delay(200);

     SSP_SSELToggle( portnum, 0 );
     src_addr[0] = 0x29;    /* Disp On */
     SSPSend( portnum, (uint8_t *)src_addr, 1 );
     SSP_SSELToggle( portnum, 1 );
    /* delay 200 ms */
     lcd_delay(200);
}
void draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint32_t color)
{
	int16_t slope = abs(y1 - y0) > abs(x1 - x0);
	if (slope) {
	swap(x0, y0);
	swap(x1, y1);
	}

	if (x0 > x1) {
	swap(x0, x1);
	swap(y0, y1);
	}

	int16_t x_diff, y_diff;
	x_diff = x1 - x0;
	y_diff = abs(y1 - y0);

	int16_t err = x_diff / 2;
	int16_t ystep;

	if (y0 < y1) {
	ystep = 1;
	} else {
	ystep = -1;
	}
	for (; x0<=x1; x0++) {
	if (slope) {
			draw_pixel(y0, x0, color);
	} else {
			draw_pixel(x0, y0, color);
	}
	err -= y_diff;
	if (err < 0) {
	y0 += ystep;
	err += x_diff;
	}
	}
}

float SINE_THETA_WTV;
float COSINE_THETA_WTV;
float SINE_PHI_WTV;
float COSINE_PHI_WTV;
float RHO;

point3d convertWtoV(point3d worldPt)
{
	point3d viewerPt;
	viewerPt.x = -(SINE_THETA_WTV * worldPt.x) + (COSINE_THETA_WTV * worldPt.y);
	viewerPt.y = -(COSINE_THETA_WTV * COSINE_PHI_WTV * worldPt.x) - (SINE_THETA_WTV * COSINE_PHI_WTV * worldPt.y) + (SINE_PHI_WTV * worldPt.z);
	viewerPt.z = -(COSINE_THETA_WTV * COSINE_PHI_WTV * worldPt.x) - (COSINE_THETA_WTV * COSINE_PHI_WTV * worldPt.y) - (COSINE_PHI_WTV * worldPt.z) + RHO;
	return viewerPt;
}

point3d rotatePoint(point3d worldPt, int angle)
{
	point3d rotatedPt;

	float radians	=	( (angle * 3.142f) / 180);
	float sine		=	sin(radians);
	float cosine	=	cos(radians);


	rotatedPt.x		=	(worldPt.x * cosine) - (worldPt.y * sine);
	rotatedPt.y		=	(worldPt.x * sine) + (worldPt.y * cosine);
	rotatedPt.z		=	worldPt.z;

	return rotatedPt;
}

point project_coordinates (int x_w, int y_w, int z_w)
{
	point projectedPt;
	point3d p = (point3d) {x_w, y_w, z_w};
	p = convertWtoV(p);
	projectedPt.x = (p.x * (D_focal/p.z));
	projectedPt.y = (p.y * (D_focal/p.z));

	/*converting to physical display coordinates*/
	projectedPt.x = projectedPt.x + (ST7735_TFTWIDTH/2);
	projectedPt.y = (ST7735_TFTHEIGHT/2) - projectedPt.y;
	projectedPt.x = (projectedPt.x < 0) ? 0 : ((projectedPt.x > ST7735_TFTWIDTH) ? ST7735_TFTWIDTH : projectedPt.x);
	projectedPt.y = (projectedPt.y < 0) ? 0 : ((projectedPt.y > ST7735_TFTHEIGHT) ? ST7735_TFTHEIGHT : projectedPt.y);

	return projectedPt;
}

point project_3dcoordinates(point3d p)
{
	point pt = project_coordinates(p.x, p.y, p.z);
	return pt;
}

void draw_coordinates ()
{
	point lcd;
	int x1,y1,x2,y2, x3,y3,x4,y4;
	lcd = project_coordinates (0,0,0);
	x1=lcd.x;
	y1=lcd.y;
	lcd = project_coordinates (180,0,0);
	x2=lcd.x;
	y2=lcd.y;
	lcd = project_coordinates (0,180,0);
	x3=lcd.x;
	y3=lcd.y;
	lcd = project_coordinates (0,0,180);
	x4=lcd.x;
	y4=lcd.y;

	draw_line(x1,y1,x2,y2,0x00FF00FF);			//x axis  red
	draw_line(x1,y1,x3,y3,0x0000FF00);			//y axis  green
	draw_line(x1, y1, x4, y4,0x000000FF);  		//z axis  blue
}

point3d shadowPoints(point3d wPt)
{
	point3d shadowPnt;
	point3d src = (point3d) {0, 50, 400};

	float lambda = (-src.z)/((float)(src.z - wPt.z));

	shadowPnt.x = src.x + (lambda * (src.x - wPt.x));
	shadowPnt.y = src.y + (lambda * (src.y - wPt.y));
	shadowPnt.z = src.z + (lambda * (src.z - wPt.z));

	return shadowPnt;
}

void draw_shadow(point3d start_pnt, int size)
{
	point3d topSurface[4] = {
			(point3d) { start_pnt.x + size, start_pnt.y + size, start_pnt.z + size },
			(point3d) { start_pnt.x, start_pnt.y + size, start_pnt.z + size },
			(point3d) { start_pnt.x, start_pnt.y, start_pnt.z + size },
			(point3d) { start_pnt.x + size, start_pnt.y, start_pnt.z + size }
	};
	int i,j;
	point3d cubeShadow[4];


	for(i=0; i<4; i++)
	{
		cubeShadow[i] = shadowPoints(topSurface[i]);
	}


	point3d startPt = cubeShadow[2];
	point3d endPt = cubeShadow[0];
	point currPt;

	for(i=startPt.y; i<endPt.y; i++)
	{
		for(j=startPt.x; j<endPt.x; j++)
		{
			currPt = project_3dcoordinates((point3d) { j, i, 0 });
			draw_pixel(currPt.x, currPt.y, BLACK);
		}
	}
}

void draw_cube(point3d start_pnt, int size, int angle)
{
	point lcd;
	int x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7;

	lcd = project_3dcoordinates (rotatePoint( (point3d) {start_pnt.x,start_pnt.y,(size+start_pnt.z) }, angle));
	x1=lcd.x;
	y1=lcd.y;
	lcd = project_3dcoordinates (rotatePoint((point3d) {(size+start_pnt.x),start_pnt.y,(size+start_pnt.z) }, angle ));
	x2=lcd.x;
	y2=lcd.y;
	lcd = project_3dcoordinates (rotatePoint((point3d) {(size+start_pnt.x),(size+start_pnt.y),(size+start_pnt.z)}, angle));
	x3=lcd.x;
	y3=lcd.y;
	lcd = project_3dcoordinates (rotatePoint((point3d) {start_pnt.x,(size+start_pnt.y),(size+start_pnt.z) }, angle));
	x4=lcd.x;
	y4=lcd.y;
	lcd = project_3dcoordinates (rotatePoint((point3d){(size+start_pnt.x),start_pnt.y,start_pnt.z}, angle));
	x5=lcd.x;
	y5=lcd.y;
	lcd = project_3dcoordinates (rotatePoint((point3d){(size+start_pnt.x),(size+start_pnt.y),start_pnt.z}, angle));
	x6=lcd.x;
	y6=lcd.y;
	lcd = project_3dcoordinates (rotatePoint((point3d){start_pnt.x,(size+start_pnt.y),start_pnt.z}, angle));
	x7=lcd.x;
	y7=lcd.y;
	draw_line(x1, y1, x2, y2,0x00FF0000);
	draw_line(x2, y2, x3, y3,0x00FF0000);
	draw_line(x3, y3, x4, y4,0x00FF0000);
	draw_line(x4, y4, x1, y1,0x00FF0000);
	draw_line(x2, y2, x5, y5,0x00FF0000);
	draw_line(x5, y5, x6, y6,0x00FF0000);
	draw_line(x6, y6, x3, y3,0x00FF0000);
	draw_line(x6, y6, x7, y7,0x00FF0000);
	draw_line(x7, y7, x4, y4,0x00FF0000);
}

void draw_square(point3d startingpt, int len, int angle)
{
	int i, j, k, x[4], y[4];
	uint16_t x0, y0;
	uint32_t color, randomColors[8] = { WHITE, BLACK, RED, BLUE, PURPLE};
	float lambda = 0.2f;

	point pt0, pt1;
	point3d surface[4] = { (point3d){startingpt.x + len, startingpt.y+ len, startingpt.z},
							(point3d){startingpt.x + len, startingpt.y+ len, startingpt.z+len},
							(point3d){startingpt.x + len, startingpt.y, startingpt.z+len},
							(point3d){startingpt.x + len, startingpt.y, startingpt.z} };
	int cubeLen	=	len;

	for (k=0; k<5; k++)
	{

		len		=	(int)((rand() % cubeLen) * 0.6f);
		x0		= 	surface[3].y + (rand() % (cubeLen - len));
		y0		= 	surface[3].z + (rand() % (cubeLen - len));
		color	=	randomColors[(rand() % 5)];

		/* Points for the Initial square */
		int xi[4] = { x0, x0, (x0 + len), (x0 + len) };
		int yi[4] = { y0, (y0 + len), (y0 + len), y0};

		int numOfSqrs = ( ((len * 0.1f) < 3) ? 5 : (len * 0.25f));

		for (j=0; j<numOfSqrs; j++)
		{

			for(i=0; i<4; i++)
			{
				/* Saving the points computed for the last square */
				x[i] = xi[i];
				y[i] = yi[i];
			}

			for (i=0; i<4; i++)
			{
				pt0 = (point) { x[i], y[i] };
				pt1 = (point) { x[(i+1)%4], y[(i+1)%4] };

				if (angle == 0)
				{
					pt0 = project_3dcoordinates((point3d) {surface[0].x, pt0.x, pt0.y });
					pt1 = project_3dcoordinates((point3d) {surface[0].x, pt1.x, pt1.y });
				}
				else
				{
					point3d rotatedPt = rotatePoint(((point3d) {surface[0].x, pt0.x, pt0.y }), angle);
					pt0		=	project_3dcoordinates(rotatedPt);
					rotatedPt	=	rotatePoint(((point3d) {surface[0].x, pt1.x, pt1.y }), angle);
					pt1		=	project_3dcoordinates(rotatedPt);
				}

				draw_line(pt0.x, pt0.y, pt1.x, pt1.y, color);

				/* Use the previously drawn square to find the points of the next square */
				xi[i] = x[i] + ( lambda * ( (float) (x[(i+1)%4] - x[i]) ) );
				yi[i] = y[i] + ( lambda * ( (float) (y[(i+1)%4] - y[i]) ) );
			}
		}
	}
}

void draw_tree(point3d start_pnt, int size, int degree)
{
	int i=0, offset, color = DARKGREEN;
	point lcd;
	point3d surface[4] = { (point3d) { start_pnt.x+size, start_pnt.y+size, start_pnt.z },
			(point3d) { start_pnt.x, start_pnt.y+size, start_pnt.z },
			(point3d) { start_pnt.x, start_pnt.y+size, start_pnt.z+size },
			(point3d) { start_pnt.x+size, start_pnt.y+size, start_pnt.z+size } };
	int tree_branch[3][3]={
			{start_pnt.z + 10, start_pnt.z + 30, start_pnt.x + (0.5*size)},
			{start_pnt.z + 20, start_pnt.z + 30, start_pnt.x + (0.3*size)},
			{start_pnt.z + 15, start_pnt.z + 37, start_pnt.x + (0.8*size)} };
	while(i<3)
	{
		int x0, y0, y1, x1,xp0,xp1,yp0,yp1;
		offset = start_pnt.y+size;
		x0=tree_branch[i][0];
		x1=tree_branch[i][1];
		y0=tree_branch[i][2];
		y1=y0;
		i++;
		lcd = project_3dcoordinates (rotatePoint((point3d){y0,offset,x0}, degree));
		xp0=lcd.x;
		yp0=lcd.y;
		lcd = project_3dcoordinates (rotatePoint((point3d){y1,offset,x1}, degree));
		xp1=lcd.x;
		yp1=lcd.y;
		draw_line(xp0, yp0, xp1, yp1,0x00FF8000);		//level 0 straight line
		draw_line((xp0+1), (yp0+1), (xp1+1), (yp1+1),0x00FF8000);		//level 0 straight line
		draw_line((xp0-1), (yp0-1), (xp1-1), (yp1-1),0x00FF8000);		//level 0 straight line

		int it=0;
		for(it=0;it<5;it++){
			int16_t x2=(0.6*(x1-x0))+x1; 				// length of level 1 = 0.8 of previous level
			x2 = LIM_RANGE(x2, surface[3].z, surface[0].z);
			int16_t y2=y1;
			y2 = LIM_RANGE(y2, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){y2,offset,x2}, degree));
			int xp2=lcd.x;
			int yp2=lcd.y;
			draw_line(xp1, yp1, xp2, yp2,color);		//level 1 straight line
			//draw_rect(0,0,127,159,0x00000000);

			//for right rotated offset 30 degree
			int16_t xr= ((0.134*x1)+(0.866*x2)-(0.5*y2)+(0.5*y1));
			int16_t yr=((0.5*x2)-(0.5*x1)+(0.866*y2)-(0.866*y1)+y1);
			xr = LIM_RANGE(xr, surface[3].z, surface[0].z);
			yr = LIM_RANGE(yr, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yr,offset,xr}, degree));
			int xpr=lcd.x;
			int ypr=lcd.y;

			//for left rotated offset 30 degree
			int16_t xl=((0.134*x1)+(0.866*x2)+(0.5*y2)-(0.5*y1));
			int16_t yl=((0.5*x1)-(0.5*x2)+(0.134*y2)+(0.866*y1));
			xl = LIM_RANGE(xl, surface[3].z, surface[0].z);
			yl = LIM_RANGE(yl, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yl,offset,xl}, degree));
			int xpl=lcd.x;
			int ypl=lcd.y;

			draw_line(xp1, yp1, xpr, ypr,color);
			draw_line(xp1, yp1, xpl, ypl,color);
			draw_rect(0,0,127,159,0x00000000);
			//for branches on right rotated branch offset 30 degree
			int16_t xrLen = sqrt(pow((xr-x1),2)+pow((yr-y1),2)) ;	//length of right branch
			int16_t xrImag= (0.8*xrLen)+xr;					//imaginary vertical line x coordinate, y= yr
			int16_t xr1 = ((0.134*xr)+(0.866*xrImag)-(0.5*yr)+(0.5*yr));
			int16_t yr1 = ((0.5*xrImag)-(0.5*xr)+(0.866*yr)-(0.866*yr)+yr);
			xr1 = LIM_RANGE(xr1, surface[3].z, surface[0].z);
			yr1 = LIM_RANGE(yr1, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yr1,offset,xr1}, degree));
			int xpr1=lcd.x;
			int ypr1=lcd.y;
			//for right branch
			int16_t xrr,xrl,yrr,yrl;
			xrr = ((0.134*xr)+(0.866*xr1)-(0.5*yr1)+(0.5*yr));
			yrr = ((0.5*xr1)-(0.5*xr)+(0.866*yr1)-(0.866*yr)+yr);
			xrr = LIM_RANGE(xrr, surface[3].z, surface[0].z);
			yrr = LIM_RANGE(yrr, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yrr,offset,xrr}, degree));
			int xprr=lcd.x;
			int yprr=lcd.y;
			//for left branch
			xrl = ((0.134*xr)+(0.866*xr1)+(0.5*yr1)-(0.5*yr));
			yrl = ((0.5*xr)-(0.5*xr1)+(0.134*yr)+(0.866*yr1));
			xrl = LIM_RANGE(xrl, surface[3].z, surface[0].z);
			yrl = LIM_RANGE(yrl, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yrl,offset,xrl}, degree));
			int xprl=lcd.x;
			int yprl=lcd.y;
			//for branches on left rotated branch offset 30 degree
			int16_t xlImag= (0.8*xrLen)+xl;					//imaginary vertical line x coordinate, y= yr
			int16_t xl1 = ((0.134*xl)+(0.866*xlImag)+(0.5*yl)-(0.5*yl));
			int16_t yl1 = ((0.5*xl)-(0.5*xlImag)+(0.134*yl)+(0.866*yl));
			xl1 = LIM_RANGE(xl1, surface[3].z, surface[0].z);
			yl1 = LIM_RANGE(yl1, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yl1,offset,xl1}, degree));
			int xpl1=lcd.x;
			int ypl1=lcd.y;
			//for right branch
			int16_t xlr,xll,ylr,yll;
			xlr = ((0.134*xl)+(0.866*xl1)-(0.5*yl1)+(0.5*yl));
			ylr = ((0.5*xl1)-(0.5*xl)+(0.866*yl1)-(0.866*yl)+yl);
			xlr = LIM_RANGE(xlr, surface[3].z, surface[0].z);
			ylr = LIM_RANGE(ylr, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){ylr,offset,xlr}, degree));
			int xplr=lcd.x;
			int yplr=lcd.y;
			//for left branch
			xll = ((0.134*xl)+(0.866*xl1)+(0.5*yl1)-(0.5*yl));
			yll = ((0.5*xl)-(0.5*xl1)+(0.134*yl)+(0.866*yl1));
			xll = LIM_RANGE(xll, surface[3].z, surface[0].z);
			yll = LIM_RANGE(yll, surface[0].x, surface[1].x);
			lcd = project_3dcoordinates (rotatePoint((point3d){yll,offset,xll}, degree));
			int xpll=lcd.x;
			int ypll=lcd.y;
			draw_line(xpr, ypr, xpr1, ypr1,color);
			draw_line(xpr, ypr, xprr, yprr,color);
			draw_line(xpr, ypr, xprl, yprl,color);
			draw_line(xpl, ypl, xpl1, ypl1,color);
			draw_line(xpl, ypl, xplr, yplr,color);
			draw_line(xpl, ypl, xpll, ypll,color);

			x0=x1;
			x1=x2;
		}
		draw_rect(0,0,127,159,0x00000000);
	}
}

uint32_t computeDiffusion(point3d Pi, point3d Ps)
{
	uint32_t color = 0;
	float red, blue, green;

	float scaling = 30000, shift = 0.196f;

	float distanceSqr	=	(pow((Ps.x - Pi.x), 2) + pow((Ps.z - Pi.z), 2) + pow((Ps.z - Pi.z), 2));
	float cosine		=	((Ps.z - Pi.z)/sqrt(distanceSqr));
	float temp		=	cosine / distanceSqr;

	temp	=	(scaling * temp);
	temp	=	(temp < shift) ? shift : temp;

	red 	=	(255 * 0.8 * temp);
	green	=	(255 * 0 * temp);
	blue 	=	(255 * 0 * temp);

	color	=	(((uint32_t)red) << 16) + (((uint32_t)green) << 8) + ((uint32_t)blue);
	return color;
}

void fill_cube(point3d start_pnt,int size, int angle, int diffusion)
{
	point s1;

	int i,j;

	for(i=0;i<size;i++)
	{
		for(j=0;j<size;j++)
		{
			point3d p = (point3d) {start_pnt.x + j, start_pnt.y + i,start_pnt.z+size};
			int color;
			if (diffusion == 1)
			{
				color = computeDiffusion(p, (point3d) { start_pnt.x, start_pnt.y + (size * 0.5f), start_pnt.z + size + 100 } );
			}
			else {
				color = RED;
			}
			s1=project_3dcoordinates(rotatePoint(p, angle));	//top fill green
			draw_pixel(s1.x,s1.y,color);

			s1=project_3dcoordinates(rotatePoint((point3d){start_pnt.x + i, start_pnt.y + size, start_pnt.z + j}, angle));	// right fill yellow
			draw_pixel(s1.x,s1.y,0x000000FF);

			s1=project_3dcoordinates(rotatePoint((point3d){start_pnt.x + size,start_pnt.y+j,start_pnt.z+i}, angle));	// left fill pink
			draw_pixel(s1.x,s1.y,0x0000FF00);
		}
	}
}

void draw_line_Pts(point p0, point p1, uint32_t color)
{
	draw_line(p0.x, p0.y, p1.x, p1.y, color);
}

void drawP(point3d startPt, int size, int angle)
{
	int i, thickness= 10;
	int zOffset = startPt.z + size;
	point3d p[5] = {
			(point3d) { startPt.x + (size * 0.2), startPt.y + (size * 0.2), zOffset },
			(point3d) { startPt.x + (size * 0.8), startPt.y + (size * 0.2), zOffset },
			(point3d) { startPt.x + (size * 0.2), startPt.y + (size * 0.5), zOffset },
			(point3d) { startPt.x + (size * 0.8), startPt.y + (size * 0.5), zOffset },
			(point3d) { startPt.x + (size * 0.8), startPt.y + (size * 0.8), zOffset },
	};

	point p0, p1;
	point3d currPt0, currPt1;

	if (angle !=0 )
	{
		for(i=0; i<thickness; i++)
		{
			currPt0 = p[0];
			currPt1 = p[1];
			p0 = project_3dcoordinates(rotatePoint((point3d) { currPt0.x, currPt0.y + i, currPt0.z }, angle));
			p1 = project_3dcoordinates(rotatePoint((point3d) { currPt1.x, currPt1.y + i, currPt1.z }, angle));
			draw_line_Pts(p0, p1, WHITE);

			currPt0 = p[2];
			currPt1 = p[3];
			p0 = project_3dcoordinates(rotatePoint((point3d) { currPt0.x, currPt0.y + i, currPt0.z }, angle));
			p1 = project_3dcoordinates(rotatePoint((point3d) { currPt1.x, currPt1.y + i, currPt1.z }, angle));
			draw_line_Pts(p0, p1, WHITE);

			currPt0 = p[1];
			currPt1 = p[4];
			p0 = project_3dcoordinates(rotatePoint((point3d) { currPt0.x - i, currPt0.y, currPt0.z }, angle));
			p1 = project_3dcoordinates(rotatePoint((point3d) { currPt1.x - i, currPt1.y, currPt1.z }, angle));
			draw_line_Pts(p0, p1, WHITE);

			currPt0 = p[0];
			currPt1 = p[2];
			p0 = project_3dcoordinates(rotatePoint((point3d) { currPt0.x + i, currPt0.y, currPt0.z }, angle));
			p1 = project_3dcoordinates(rotatePoint((point3d) { currPt1.x + i, currPt1.y, currPt1.z }, angle));
			draw_line_Pts(p0, p1, WHITE);
		}
	}
	else
	{

		for(i=0; i<thickness; i++)
		{
			currPt0 = p[0];
			currPt1 = p[1];
			p0 = project_3dcoordinates((point3d) { currPt0.x, currPt0.y + i, currPt0.z });
			p1 = project_3dcoordinates((point3d) { currPt1.x, currPt1.y + i, currPt1.z });
			draw_line_Pts(p0, p1, WHITE);

			currPt0 = p[2];
			currPt1 = p[3];
			p0 = project_3dcoordinates((point3d) { currPt0.x, currPt0.y + i, currPt0.z });
			p1 = project_3dcoordinates((point3d) { currPt1.x, currPt1.y + i, currPt1.z });
			draw_line_Pts(p0, p1, WHITE);

			currPt0 = p[1];
			currPt1 = p[4];
			p0 = project_3dcoordinates((point3d) { currPt0.x - i, currPt0.y, currPt0.z });
			p1 = project_3dcoordinates((point3d) { currPt1.x - i, currPt1.y, currPt1.z });
			draw_line_Pts(p0, p1, WHITE);

			currPt0 = p[0];
			currPt1 = p[2];
			p0 = project_3dcoordinates((point3d) { currPt0.x + i, currPt0.y, currPt0.z });
			p1 = project_3dcoordinates((point3d) { currPt1.x + i, currPt1.y, currPt1.z });
			draw_line_Pts(p0, p1, WHITE);
		}

	}
}

int main (void)
{
	uint32_t i, portnum = PORT_NUM;
	int size, angle;
	point3d start_pnt;
	portnum = 0 ; /* For LCD use 1 */

	/* SystemClockUpdate() updates the SystemFrequency variable */
	if ( portnum == 0 )
		SSP0Init();            /* initialize SSP port */
	else if ( portnum == 1 )
		SSP1Init();

	for ( i = 0; i < SSP_BUFSIZE; i++ )
	{
		src_addr[i] = (uint8_t)i;
		dest_addr[i] = 0;
	}

   RHO = ((float) sqrt(pow(camera.x, 2) + pow(camera.y, 2) + pow(camera.z, 2)));
   SINE_THETA_WTV = (float) camera.y / (sqrt(pow(camera.x, 2) + pow(camera.y, 2)));
   COSINE_THETA_WTV = (float) camera.x / (sqrt(pow(camera.x, 2) + pow(camera.y, 2)));
   SINE_PHI_WTV = (float) (sqrt(pow(camera.x, 2) + pow(camera.y, 2))/RHO);
   COSINE_PHI_WTV = (float) camera.z/RHO;

  //To initialize LCD
   lcd_init();
   fill_LCDdisplay(0x00000000);  /* fill LCD screen with white */

   for (;;)
   {
	   printf("Choose option:\n");
	   scanf("%d", &i);
	   fill_LCDdisplay(0x00000000);  /* fill LCD screen with white */

	   if (i==0)
	   {
		   fill_LCDdisplay(0xFFFFFF);  /* fill LCD screen with white */
		   size = 125;
		   start_pnt = (point3d) {0, 0, 0};
		   angle	=	0;
		   draw_coordinates();
		   draw_cube(start_pnt, size, angle);
		   fill_cube(start_pnt, size, angle, 1);
		   draw_square(start_pnt, size, angle);
		   draw_tree(start_pnt, size, angle);
	   }
	   else if (i==1)
	   {
		   fill_LCDdisplay(0xFFFFFF);  /* fill LCD screen with white */
		   draw_coordinates();
		   int j;
		   int angle1[3] = {-25, -10, 15};
		   int size1[3] = {75, 90, 75};
		   point3d start[3] = {(point3d) {100, 0, 0}, (point3d) {0, 0, 50}, (point3d) {0, 100, 0}};
		   for (j = 0; j<=2; j++)
		   {
			   size = size1[j];
			   start_pnt = start[j];
			   angle	=	angle1[j];
			   draw_cube(start_pnt, size, angle);
			   fill_cube(start_pnt, size, angle, 0);
			   draw_square(start_pnt, size, angle);
			   draw_tree(start_pnt, size, angle);
			   drawP(start_pnt, size, angle);
		   }
	   }
	   else if (i==2)
	   {
		   fill_LCDdisplay(0xFFFFFF);  /* fill LCD screen with white */
		   size = 100;
		   start_pnt = (point3d) {0, 0, 0};
		   angle	=	0;
		   draw_coordinates();
		   draw_shadow(start_pnt, size);
		   draw_cube(start_pnt, size, angle);
		   fill_cube(start_pnt, size, angle, 0);
		   draw_square(start_pnt, size, angle);
		   draw_tree(start_pnt, size, angle);
		   drawP(start_pnt, size, angle);
	   }
	   i = -1;
   }

   return 0;
}










